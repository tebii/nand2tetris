// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
 
    // Mux16 -> A reg
    Mux16(a=instruction, b=alu_out, sel=instruction[15],
            out=A_reg_input);

    // A register
    // Control
    Not(in=instruction[15], out=NOT_i);
    Not(in=instruction[12], out=NOT_A);
    And(a=NOT_A, b=instruction[5], out=in_or_a);
    Or(a=in_or_a, b=NOT_i, out=load_a);
    // Load A
    Register(in=A_reg_input, load=load_a, out=A);
    


    // Mux 16 -> ALU
    Mux16(a=A, b=inM, sel=instruction[12], out=mux_alu);

    // D register
    And(a=instruction[15], b=instruction[4], out=load_d);
    Register(in=alu_out, load=load_d, out=D);

    // ALU
    ALU(x=D, y=mux_alu, zx=instruction[11],
                        nx=instruction[10],
                        zy=instruction[9],
                        ny=instruction[8],
                        f=instruction[7],
                        no=instruction[6],
                        zr=zr_output,
                        ng=ng_output,
                        out=alu_out,
                        out=outM);

    // Write M
    And16(a=A, b=true, out[0..14]=addressM);
    And(a=instruction[15], b=instruction[3], out=writeM);


    // PC
    // control
    Not(in=zr_output, out=NOT_zr_output);
    Not(in=ng_output, out=NOT_ng_output);

    // calculate jump
    And(a=NOT_zr_output, b=ng_output, out=JLT);
    And(a=NOT_zr_output, b=NOT_ng_output, out=JGT);
    Or(a=zr_output, b=ng_output, out=JLE);

    // choose jump
    Mux4Way16(a[0]=false, b[0]=JGT, c[0]=zr_output, d[0]=NOT_ng_output,
                sel=instruction[0..1], out[0]=load_pc_a);
    Mux4Way16(a[0]=JLT, b[0]=NOT_zr_output, c[0]=JLE, d[0]=true,
                sel=instruction[0..1], out[0]=load_pc_b);

    Mux(a=load_pc_a, b=load_pc_b, sel=instruction[2], out=load_pc);

    // check for jump
    And(a=load_pc, b=instruction[15], out=jump);

    // program counter
    PC(in=A, load=jump, inc=true, reset=reset, out[0..14]=pc);

    



    
	//// Replace this comment with your code.
}
